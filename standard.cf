# Church Bools
tru = \t:Nat => \f:Nat => t;
fls = \t:Nat => \f:Nat => f;

# Pairs of Nats (function from Bool to Nat)
mkPair = \n:Nat => \m:Nat => \b:Bool => if b then m else n;
fst = \p:Bool->Nat => p false;
snd = \p:Bool->Nat => p true;

# Logical operations on Bools
not = \x:Bool => if x then false else true;
and = \x:Bool => \y:Bool => if x then y else false;
nand = \x:Bool => \y:Bool => not (and x y);
or = \x:Bool => \y:Bool => if x then true else y;
xor = \x:Bool => \y:Bool => if x then not y else y;
xnor = \x:Bool => \y:Bool => not (xor x y);

# wrappers around succ and pred
suc = \x:Nat => succ x;
prd = \x:Nat => pred x;

# Nat equality
equal = fix (
  \f:Nat->Nat->Bool =>
  \n:Nat => \m:Nat =>
    if iszero n then iszero m else
    and (not (iszero m)) (f (pred n) (pred m))
);

# less-than
lt = fix (
  \f:Nat->Nat->Bool =>
  \n:Nat => \m:Nat =>
  if iszero n then not (iszero m) else
  and (not (iszero m)) (f (pred n) (pred m))
);

# less-than-or-equal
le = fix (
  \f:Nat->Nat->Bool =>
  \n:Nat => \m:Nat =>
    if iszero n then true else
    and (not (iszero m)) (f (pred n) (pred m))
);

# greater-than
gt = \n:Nat => \m:Nat => not (le m n);

# greater-than-or-equal
ge = \n:Nat => \m:Nat => not (lt m n);

# addition
plus = fix (
  \f:Nat->Nat->Nat =>
  \n:Nat => \m:Nat =>
    if iszero n then m else succ (f (pred n) m)
);

# subtraction
minus = fix (
  \f:Nat->Nat->Nat =>
  \n:Nat => \m:Nat =>
    if iszero m then n else f (pred n) (pred m)
);

# multiplication
mult = fix (
  \f:Nat->Nat->Nat =>
  \n:Nat => \m:Nat =>
    if iszero m then 0 else
    if iszero (pred m) then n else
    plus n (f n (pred m))
);

# division (n / 0 = 0)
div = fix (
  \f:Nat->Nat->Nat =>
  \n:Nat => \m:Nat =>
    if or (iszero m) (lt n m) then 0 else
    succ (f (minus n m) m)
);

# exponentiation
pow = fix (
  \f:Nat->Nat->Nat =>
  \n:Nat => \m:Nat =>
    if iszero m then 1 else
    if iszero (pred m) then n else
    mult n (f n (pred m))
);

# factorial
fact = fix (
  \f:Nat->Nat =>
  \n:Nat =>
    if iszero n then 1 else
    mult n (f (pred n))
);
